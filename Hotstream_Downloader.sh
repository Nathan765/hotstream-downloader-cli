#!/bin/bash
# ---------------------------------------------
# Hotstream Downloader CLI
# Author: Nathan
# Date: 30/09/2024
# Description: A simple Bash script for downloading series and movies from hotstream.at.
# ---------------------------------------------

show_help() {
  echo "Usage: $0 <fileName> <ID> [<season_number>] [<episode_number>] | [<episode_number> | -<end_episode>] -f"
  
  echo""
  echo "Options:"
  echo ""
  echo "  fileName         : Nom de la s√©rie ou du film."
  echo "  ID               : Num√©ro de la s√©rie ou du film souhait√©."
  echo "  season_number    : Num√©ro de la saison souhait√©."
  echo "  episode_number   : Num√©ro de l'√©pisode souhait√©."
  echo "  start_episode    : Num√©ro de l'√©pisode de d√©part souhait√©."
  echo "  end_episode      : Num√©ro de l'√©pisode de fin souhait√©."
  echo ""
  echo "  -f              Option f permet de forcer une saison ou une s√©rie complete"
  echo ""
  
  echo "Exemples:"
  echo ""
  echo "T√©l√©chargement d'un film:"
  echo "./Hotstream_Downloader.sh "Alien" 1234"
  echo""
  echo "T√©l√©chargement de l'√©pisode 10 de la saison 1 d'une s√©rie:"
  echo "./Hotstream_Downloader.sh "X-Files" 51 1 10"
  echo""
  echo "T√©l√©chargement des √©pisodes 3 √† 6 de la saison 1 d'une s√©rie:"
  echo "./Hotstream_Downloader.sh "X-Files" 51 3 3-6"
  echo""
  echo "T√©l√©chargement du premier √©pisodes jusqu'a l'√©pisode 6 de la saison 8 d'une s√©rie:"
  echo "./Hotstream_Downloader.sh "X-Files" 51 8 -6"
  echo""
  echo "T√©l√©chargement de la saison 2 au complet d'une s√©rie:"
  echo "./Hotstream_Downloader.sh "X-Files" 51 2 -f"
  echo""
  echo "T√©l√©chargement de la s√©rie compl√®te:"
  echo "./Hotstream_Downloader.sh <fileName> <ID> -f"
  echo""
}

handle_exit() {
  echo -e "\n‚ö†Ô∏è - T√©l√©chargement interrompu. Suppression des fichiers incomplet."
  rm -f "$filename"
  exit 1
}

trap 'handle_exit' SIGINT

set_user_agent() {
  user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15"
  echo "$user_agent"
}

create_directory() {
  local path=$1
  local folder_name=$2

  local full_path="${path}/${folder_name}"

  if [ ! -d "$full_path" ]; then
    mkdir -p "$full_path"
    echo "‚úÖ - Dossier cr√©√© : $full_path"
  else
    echo "‚ÑπÔ∏è - Le dossier existe d√©j√† : $full_path"
  fi
}

download_file() {
  local url=$1
  local filename=$2
  local user_agent=$3

  wget --user-agent="$user_agent" "$url" -O "$filename" --show-progress

  if [ $? -eq 0 ]; then
    echo "‚úÖ - Le t√©l√©chargement du fichier $filename a r√©ussi"
    return 0
  else
    echo "‚ùå - Le t√©l√©chargement du fichier $filename a √©chou√© (404 ou autre)."
    rm -f "$filename"
    return 1 #0
  fi
}

download_film() {
  local id=$1
  local user_agent=$2
  local film_url="$hotstreamURL${id}/play/1.mp4"
  
  echo "T√©l√©chargement du film $filename"
  
  download_file "$film_url" "${filename}.mp4" "$user_agent"
}

format_season_episode() {
  local season=$(printf "%02d" $1)
  local episode=$(printf "%02d" $2)
  echo "S${season}E${episode}"
}

download_episode() {
  local id=$1
  local season=$2
  local episode_number=$3
  local user_agent=$4
  local serie_url="$hotstreamURL${id}/play/seasons/${season}/${episode_number}.mp4"
  local filename_formatted=$(format_season_episode $season $episode_number)
  local filepath="./$filename/Saison $season/${filename} ${filename_formatted}.mp4"
  
  create_directory "./$filename" "Saison $season"

  echo "T√©l√©chargement de l'√©pisode $episode_number de la saison $season de la s√©rie $filename"
  
  download_file "$serie_url" "$filepath" "$user_agent"
}

try_download_as_film_then_serie() {
  local id=$1
  local user_agent=$2
  
  echo "üëÄ - Tentative de t√©l√©chargement du film $id"
  if download_film "$id" "$user_agent"; then
    echo "‚úÖ - Le film a √©t√© t√©l√©charg√© avec succ√®s."
  else
    echo "‚ùå - Tentative √©chou√©e pour le film"
    echo "üëÄ - Tentative de t√©l√©chargement de l'√©pisode $episode_number de la saison $season de la s√©rie $id"
    download_episode "$id" 1 1 "$user_agent"
  fi
}

download_episode_range() {
  local id=$1
  local season=$2
  local start=$3
  local end=$4
  local user_agent=$5

  for ((episode=start; episode<=end; episode++)); do
    download_episode "$id" "$season" "$episode" "$user_agent"
  done
}

download_season() {
  local id=$1
  local season=$2
  local user_agent=$3
  local episode=1
  
  local number_of_errors=0
  local max_errors=2

  echo "üöÄ-  T√©l√©chargement de tous les √©pisodes de la saison $season de la s√©rie $id"

  while true; do
    echo "üîÑ - T√©l√©chargement de l'√©pisode $episode."

    download_episode "$id" "$season" "$episode" "$user_agent"

    if [ $? -ne 0 ]; then
      echo "‚ùå - T√©l√©chargement de l'√©pisode $episode √©chou√© ou aucun √©pisode suppl√©mentaire trouv√©."
      ((number_of_errors++))

      if [ "$number_of_errors" -ge "$max_errors" ]; then
        echo "‚ö†Ô∏è - Nombre maximum d'erreurs atteint. Arr√™t du t√©l√©chargement de la saison."
        return 1
      fi
    else
      number_of_errors=0
    fi

    ((episode++))
  done

  echo "‚úÖ - T√©l√©chargement termin√© pour la saison $season de la s√©rie $id."
  return 0
}

download_seasons() {
  local id=$1
  local user_agent=$2
  local season=1

  local number_of_errors=0
  local max_errors=2
  
  echo "üöÄ-  T√©l√©chargement de complet de la s√©rie $id"
  
  while true; do
    echo "T√©l√©chargement de la saison $season."
    download_season "$id" "$season" "$user_agent"

    if [ $? -ne 0 ]; then
      echo "‚ùå - √âchec du t√©l√©chargement de la saison $season. Arr√™t du t√©l√©chargement."
      ((number_of_errors++))

      if [ "$number_of_errors" -ge "$max_errors" ]; then
        echo "‚ö†Ô∏è - Nombre maximum d'erreurs atteint. Arr√™t du t√©l√©chargement de la s√©rie."
        return 1
    fi
    else
      number_of_errors=0
    fi
    
    ((season++))
  done
  
  echo "‚úÖ - T√©l√©chargement termin√© pour les saisons de la s√©rie $id."
  return 0
}

main() {
  local filename=$1
  local id=$2
  local season=$3
  local episode_range=$4

  if [[ "$#" -lt 2 || "$#" -gt 4 ]]; then
   echo "Erreur : Pas assez d'arguments."
   show_help
   exit 1
  fi

  if [[ "$1" == "--h" || "$1" == "-h" || "$1" == "--helper" ]]; then
    show_help
    exit 0
  fi

  local user_agent
  user_agent=$(set_user_agent)
    
  if [ -z "$season" ]; then
    try_download_as_film_then_serie "$id" "$user_agent"
  else
    create_directory "." "$filename"
    if [[ "$season" == "-f" ]]; then
        download_seasons "$id" "$user_agent"
    
    elif [ -z "$episode_range" ]; then
        download_episode "$id" "$season" 1 "$user_agent"

    elif [[ "$episode_range" =~ ^[0-9]+$ ]]; then
        local episode_number=$episode_range
        download_episode "$id" "$season" "$episode_number" "$user_agent"

    elif [[ "$episode_range" =~ ^-[0-9]+$ ]]; then
        local end_episode=${episode_range#-}
        download_episode_range "$id" "$season" 1 "$end_episode" "$user_agent"

    elif [[ "$episode_range" =~ ^[0-9]+-[0-9]+$ ]]; then
        IFS='-' read -r start_episode end_episode <<< "$episode_range"
        download_episode_range "$id" "$season" "$start_episode" "$end_episode" "$user_agent"

    elif [[ "$episode_range" == "-f" ]]; then
        download_season "$id" "$season" "$user_agent"
    else
        echo "Erreur : Argument invalide."
        show_help
        exit 1
    fi
  fi
}

hotstreamURL="https://cdn.hotstream.at/"

main "$@"
